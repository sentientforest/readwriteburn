// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ReadWriteBurnContract API should match snapshot 1`] = `
{
  "contractName": "ReadWriteBurn",
  "contractVersion": "?.?.?",
  "methods": [
    {
      "description": "Evaluate a batch of transactions Transaction is read only (evaluate). Allowed roles: EVALUATE.",
      "dtoSchema": {
        "properties": {
          "operations": {
            "items": {
              "properties": {
                "dto": {
                  "minLength": 1,
                  "properties": {
                    "prefix": {
                      "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                      "minLength": 1,
                      "type": "string",
                    },
                    "signature": {
                      "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                      "minLength": 1,
                      "type": "string",
                    },
                    "signerAddress": {
                      "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                      "minLength": 1,
                      "type": "string",
                    },
                    "signerPublicKey": {
                      "description": "Public key of the user who signed the DTO.",
                      "minLength": 1,
                      "type": "string",
                    },
                    "signing": {
                      "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                      "enum": [
                        "ETH",
                        "TON",
                      ],
                      "type": "string",
                    },
                    "uniqueKey": {
                      "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                      "minLength": 1,
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
                "method": {
                  "minLength": 1,
                  "type": "string",
                },
                "prefix": {
                  "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                  "minLength": 1,
                  "type": "string",
                },
                "signature": {
                  "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                  "minLength": 1,
                  "type": "string",
                },
                "signerAddress": {
                  "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                  "minLength": 1,
                  "type": "string",
                },
                "signerPublicKey": {
                  "description": "Public key of the user who signed the DTO.",
                  "minLength": 1,
                  "type": "string",
                },
                "signing": {
                  "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                  "enum": [
                    "ETH",
                    "TON",
                  ],
                  "type": "string",
                },
                "uniqueKey": {
                  "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                  "minLength": 1,
                  "type": "string",
                },
              },
              "required": [
                "method",
                "dto",
              ],
              "type": "object",
            },
            "maxItems": 1000,
            "minItems": 1,
            "type": "array",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
          "writesLimit": {
            "description": "Soft limit of keys written to chain in a batch, excluding deletes. If the limit is exceeded, all subsequent operations in batch fail. Typically it is safe to repeat failed operations in the next batch. Default: 10000. Max: 100000.",
            "maximum": 100000,
            "minimum": 1,
            "type": "number",
          },
        },
        "required": [
          "operations",
        ],
        "type": "object",
      },
      "isWrite": false,
      "methodName": "BatchEvaluate",
      "responseSchema": {
        "properties": {
          "Data": {
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": "Submit a batch of transactionsSubmit a batch of transactions Allowed roles: SUBMIT. Allowed orgs: CuratorOrg.",
      "dtoSchema": {
        "properties": {
          "operations": {
            "items": {
              "properties": {
                "dto": {
                  "minLength": 1,
                  "properties": {
                    "prefix": {
                      "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                      "minLength": 1,
                      "type": "string",
                    },
                    "signature": {
                      "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                      "minLength": 1,
                      "type": "string",
                    },
                    "signerAddress": {
                      "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                      "minLength": 1,
                      "type": "string",
                    },
                    "signerPublicKey": {
                      "description": "Public key of the user who signed the DTO.",
                      "minLength": 1,
                      "type": "string",
                    },
                    "signing": {
                      "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                      "enum": [
                        "ETH",
                        "TON",
                      ],
                      "type": "string",
                    },
                    "uniqueKey": {
                      "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                      "minLength": 1,
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
                "method": {
                  "minLength": 1,
                  "type": "string",
                },
                "prefix": {
                  "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                  "minLength": 1,
                  "type": "string",
                },
                "signature": {
                  "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                  "minLength": 1,
                  "type": "string",
                },
                "signerAddress": {
                  "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                  "minLength": 1,
                  "type": "string",
                },
                "signerPublicKey": {
                  "description": "Public key of the user who signed the DTO.",
                  "minLength": 1,
                  "type": "string",
                },
                "signing": {
                  "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                  "enum": [
                    "ETH",
                    "TON",
                  ],
                  "type": "string",
                },
                "uniqueKey": {
                  "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                  "minLength": 1,
                  "type": "string",
                },
              },
              "required": [
                "method",
                "dto",
              ],
              "type": "object",
            },
            "maxItems": 1000,
            "minItems": 1,
            "type": "array",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
          "writesLimit": {
            "description": "Soft limit of keys written to chain in a batch, excluding deletes. If the limit is exceeded, all subsequent operations in batch fail. Typically it is safe to repeat failed operations in the next batch. Default: 10000. Max: 100000.",
            "maximum": 100000,
            "minimum": 1,
            "type": "number",
          },
        },
        "required": [
          "operations",
        ],
        "type": "object",
      },
      "isWrite": true,
      "methodName": "BatchSubmit",
      "responseSchema": {
        "properties": {
          "Data": {
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Allowed roles: SUBMIT.",
      "dtoSchema": {
        "properties": {
          "fee": {
            "description": "Fee Verification DTO. With a valid signature from an Authoritative User, used to verify that a Fee was paid across channels. Typically, this will be a type of multi-signature DTO or a double signed DTO. That is, the \`authorization\` property contains the original authorization DTO signed by the End User. And the overall FeeVerificationDto will be signed by an Authoritative/Administrative user (i.e. a CuratorUser). The Chaincode can then verify definitively that both a) the end user did authorize a spend, and b) the Authoritative/Administrative user confirms that this authorization was successfully approved/written/burned on the assets channel.",
            "properties": {
              "authority": {
                "description": "The user authorizing a GalaChainFee payment. Expected to be the same user which signed the DTO provided in the \`authorization\` property.",
                "type": "string",
              },
              "created": {
                "description": "Unix Timestamp of fee authorization chain object creation.",
                "minLength": 1,
                "type": "string",
              },
              "feeAuthorizationKey": {
                "description": "Chain Key referencing Fee Authorization Chain Object saved in World State.",
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "quantity": {
                "description": "Token Quantity authorized with this fee. Number provided as a string.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "txId": {
                "description": "Transaction ID where authorization was granted for fee spend.",
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "authority",
              "created",
              "txId",
              "quantity",
              "feeAuthorizationKey",
            ],
            "type": "object",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
          "vote": {
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "vote",
          "fee",
        ],
        "type": "object",
      },
      "isWrite": true,
      "methodName": "CastVote",
      "responseSchema": {
        "properties": {
          "Data": {
            "type": "null",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Allowed roles: SUBMIT.",
      "dtoSchema": {
        "properties": {
          "fee": {
            "description": "Fee Verification DTO. With a valid signature from an Authoritative User, used to verify that a Fee was paid across channels. Typically, this will be a type of multi-signature DTO or a double signed DTO. That is, the \`authorization\` property contains the original authorization DTO signed by the End User. And the overall FeeVerificationDto will be signed by an Authoritative/Administrative user (i.e. a CuratorUser). The Chaincode can then verify definitively that both a) the end user did authorize a spend, and b) the Authoritative/Administrative user confirms that this authorization was successfully approved/written/burned on the assets channel.",
            "properties": {
              "authority": {
                "description": "The user authorizing a GalaChainFee payment. Expected to be the same user which signed the DTO provided in the \`authorization\` property.",
                "type": "string",
              },
              "created": {
                "description": "Unix Timestamp of fee authorization chain object creation.",
                "minLength": 1,
                "type": "string",
              },
              "feeAuthorizationKey": {
                "description": "Chain Key referencing Fee Authorization Chain Object saved in World State.",
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "quantity": {
                "description": "Token Quantity authorized with this fee. Number provided as a string.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "txId": {
                "description": "Transaction ID where authorization was granted for fee spend.",
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "authority",
              "created",
              "txId",
              "quantity",
              "feeAuthorizationKey",
            ],
            "type": "object",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "submission": {
            "properties": {
              "contributor": {
                "type": "string",
              },
              "description": {
                "type": "string",
              },
              "fire": {
                "minLength": 1,
                "type": "string",
              },
              "name": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
              "url": {
                "type": "string",
              },
            },
            "required": [
              "name",
              "fire",
            ],
            "type": "object",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "submission",
          "fee",
        ],
        "type": "object",
      },
      "isWrite": true,
      "methodName": "ContributeSubmission",
      "responseSchema": {
        "properties": {
          "Data": {
            "properties": {
              "contributor": {
                "type": "string",
              },
              "description": {
                "type": "string",
              },
              "fire": {
                "minLength": 1,
                "type": "string",
              },
              "id": {
                "minLength": 1,
                "type": "string",
              },
              "name": {
                "minLength": 1,
                "type": "string",
              },
              "url": {
                "type": "string",
              },
            },
            "required": [
              "fire",
              "id",
              "name",
            ],
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Allowed roles: SUBMIT.",
      "dtoSchema": {
        "properties": {
          "fire": {
            "type": "string",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "submission": {
            "type": "string",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
          "votes": {
            "items": {
              "type": "string",
            },
            "maxItems": 1000,
            "minItems": 1,
            "type": "array",
          },
        },
        "required": [
          "votes",
        ],
        "type": "object",
      },
      "isWrite": true,
      "methodName": "CountVotes",
      "responseSchema": {
        "properties": {
          "Data": {
            "type": "null",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Transaction is read only (evaluate). Allowed roles: EVALUATE.",
      "dtoSchema": {
        "properties": {
          "callerPublicKey": {
            "minLength": 1,
            "type": "string",
          },
          "dto": {
            "minLength": 1,
            "type": "string",
          },
          "method": {
            "minLength": 1,
            "type": "string",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "method",
          "callerPublicKey",
        ],
        "type": "object",
      },
      "isWrite": false,
      "methodName": "DryRun",
      "responseSchema": {
        "properties": {
          "Data": {
            "properties": {
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Transaction is read only (evaluate). Allowed roles: EVALUATE.",
      "dtoSchema": {
        "properties": {
          "bookmark": {
            "type": "string",
          },
          "limit": {
            "type": "number",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "slug": {
            "type": "string",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "type": "object",
      },
      "isWrite": false,
      "methodName": "FetchFires",
      "responseSchema": {
        "properties": {
          "Data": {
            "properties": {
              "nextPageBookmark": {
                "description": "Next page bookmark.",
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "results": {
                "description": "List of results.",
                "items": {
                  "properties": {
                    "description": {
                      "type": "string",
                    },
                    "entryParent": {
                      "type": "string",
                    },
                    "name": {
                      "minLength": 1,
                      "type": "string",
                    },
                    "slug": {
                      "type": "string",
                    },
                    "starter": {
                      "description": "Allowed value is a user alias ('client|<user-id>', or 'eth|<checksumed-eth-addr>', or 'ton|<chain:ton-address>', or valid system-level username), or valid Ethereum address.",
                      "type": "string",
                    },
                  },
                  "required": [
                    "entryParent",
                    "slug",
                    "name",
                    "starter",
                  ],
                  "type": "object",
                },
                "type": "array",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "results",
            ],
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Transaction is read only (evaluate). Allowed roles: EVALUATE.",
      "dtoSchema": {
        "properties": {
          "bookmark": {
            "type": "string",
          },
          "fire": {
            "type": "string",
          },
          "limit": {
            "type": "number",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "type": "object",
      },
      "isWrite": false,
      "methodName": "FetchSubmissions",
      "responseSchema": {
        "properties": {
          "Data": {
            "properties": {
              "nextPageBookmark": {
                "description": "Next page bookmark.",
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "results": {
                "description": "List of results.",
                "items": {
                  "properties": {
                    "contributor": {
                      "type": "string",
                    },
                    "description": {
                      "type": "string",
                    },
                    "fire": {
                      "minLength": 1,
                      "type": "string",
                    },
                    "id": {
                      "minLength": 1,
                      "type": "string",
                    },
                    "name": {
                      "minLength": 1,
                      "type": "string",
                    },
                    "url": {
                      "type": "string",
                    },
                  },
                  "required": [
                    "fire",
                    "id",
                    "name",
                  ],
                  "type": "object",
                },
                "type": "array",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "results",
            ],
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Transaction is read only (evaluate). Allowed roles: EVALUATE.",
      "dtoSchema": {
        "properties": {
          "bookmark": {
            "description": "Next page bookmark.",
            "minLength": 1,
            "type": "string",
          },
          "fire": {
            "type": "string",
          },
          "limit": {
            "description": "Limit number of results. Useful for pagination queries.",
            "type": "number",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "submission": {
            "type": "string",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "type": "object",
      },
      "isWrite": false,
      "methodName": "FetchVotes",
      "responseSchema": {
        "properties": {
          "Data": {
            "description": "Response DTO from a successful FetchVotes request.",
            "properties": {
              "nextPageBookmark": {
                "description": "Next page bookmark.",
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "results": {
                "description": "List of vote results.",
                "items": {
                  "description": "Vote Object Value with Chain Key.",
                  "properties": {
                    "prefix": {
                      "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                      "minLength": 1,
                      "type": "string",
                    },
                    "signature": {
                      "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                      "minLength": 1,
                      "type": "string",
                    },
                    "signerAddress": {
                      "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                      "minLength": 1,
                      "type": "string",
                    },
                    "signerPublicKey": {
                      "description": "Public key of the user who signed the DTO.",
                      "minLength": 1,
                      "type": "string",
                    },
                    "signing": {
                      "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                      "enum": [
                        "ETH",
                        "TON",
                      ],
                      "type": "string",
                    },
                    "uniqueKey": {
                      "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                      "minLength": 1,
                      "type": "string",
                    },
                    "value": {
                      "description": "Chain entry value identified by corresponding key on chain.",
                      "properties": {
                        "entry": {
                          "minLength": 1,
                          "type": "string",
                        },
                        "entryParent": {
                          "type": "string",
                        },
                        "entryType": {
                          "minLength": 1,
                          "type": "string",
                        },
                        "id": {
                          "minLength": 1,
                          "type": "string",
                        },
                        "quantity": {
                          "description": "Number provided as a string.",
                          "type": "string",
                        },
                        "voter": {
                          "description": "Allowed value is a user alias ('client|<user-id>', or 'eth|<checksumed-eth-addr>', or 'ton|<chain:ton-address>', or valid system-level username), or valid Ethereum address.",
                          "type": "string",
                        },
                      },
                      "required": [
                        "entryType",
                        "entryParent",
                        "entry",
                        "id",
                        "voter",
                        "quantity",
                      ],
                      "type": "object",
                    },
                  },
                  "required": [
                    "value",
                  ],
                  "type": "object",
                },
                "type": "array",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "results",
            ],
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Allowed roles: SUBMIT.",
      "dtoSchema": {
        "properties": {
          "fee": {
            "description": "Fee Verification DTO. With a valid signature from an Authoritative User, used to verify that a Fee was paid across channels. Typically, this will be a type of multi-signature DTO or a double signed DTO. That is, the \`authorization\` property contains the original authorization DTO signed by the End User. And the overall FeeVerificationDto will be signed by an Authoritative/Administrative user (i.e. a CuratorUser). The Chaincode can then verify definitively that both a) the end user did authorize a spend, and b) the Authoritative/Administrative user confirms that this authorization was successfully approved/written/burned on the assets channel.",
            "properties": {
              "authority": {
                "description": "The user authorizing a GalaChainFee payment. Expected to be the same user which signed the DTO provided in the \`authorization\` property.",
                "type": "string",
              },
              "created": {
                "description": "Unix Timestamp of fee authorization chain object creation.",
                "minLength": 1,
                "type": "string",
              },
              "feeAuthorizationKey": {
                "description": "Chain Key referencing Fee Authorization Chain Object saved in World State.",
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "quantity": {
                "description": "Token Quantity authorized with this fee. Number provided as a string.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "txId": {
                "description": "Transaction ID where authorization was granted for fee spend.",
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "authority",
              "created",
              "txId",
              "quantity",
              "feeAuthorizationKey",
            ],
            "type": "object",
          },
          "fire": {
            "properties": {
              "authorities": {
                "items": {
                  "description": "Allowed value is a user alias ('client|<user-id>', or 'eth|<checksumed-eth-addr>', or 'ton|<chain:ton-address>', or valid system-level username), or valid Ethereum address.",
                  "type": "string",
                },
                "type": "array",
              },
              "description": {
                "type": "string",
              },
              "entryParent": {
                "type": "string",
              },
              "moderators": {
                "items": {
                  "description": "Allowed value is a user alias ('client|<user-id>', or 'eth|<checksumed-eth-addr>', or 'ton|<chain:ton-address>', or valid system-level username), or valid Ethereum address.",
                  "type": "string",
                },
                "type": "array",
              },
              "name": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "slug": {
                "minLength": 1,
                "type": "string",
              },
              "starter": {
                "description": "Allowed value is a user alias ('client|<user-id>', or 'eth|<checksumed-eth-addr>', or 'ton|<chain:ton-address>', or valid system-level username), or valid Ethereum address.",
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "slug",
              "name",
              "starter",
              "authorities",
              "moderators",
            ],
            "type": "object",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "fire",
          "fee",
        ],
        "type": "object",
      },
      "isWrite": true,
      "methodName": "FireStarter",
      "responseSchema": {
        "properties": {
          "Data": {
            "properties": {
              "authorities": {
                "items": {
                  "properties": {
                    "fire": {
                      "type": "string",
                    },
                    "identity": {
                      "description": "Allowed value is a user alias ('client|<user-id>', or 'eth|<checksumed-eth-addr>', or 'ton|<chain:ton-address>', or valid system-level username), or valid Ethereum address.",
                      "type": "string",
                    },
                  },
                  "required": [
                    "fire",
                    "identity",
                  ],
                  "type": "object",
                },
                "type": "array",
              },
              "metadata": {
                "properties": {
                  "description": {
                    "type": "string",
                  },
                  "entryParent": {
                    "type": "string",
                  },
                  "name": {
                    "minLength": 1,
                    "type": "string",
                  },
                  "slug": {
                    "type": "string",
                  },
                  "starter": {
                    "description": "Allowed value is a user alias ('client|<user-id>', or 'eth|<checksumed-eth-addr>', or 'ton|<chain:ton-address>', or valid system-level username), or valid Ethereum address.",
                    "type": "string",
                  },
                },
                "required": [
                  "entryParent",
                  "slug",
                  "name",
                  "starter",
                ],
                "type": "object",
              },
              "moderators": {
                "items": {
                  "properties": {
                    "fire": {
                      "type": "string",
                    },
                    "identity": {
                      "description": "Allowed value is a user alias ('client|<user-id>', or 'eth|<checksumed-eth-addr>', or 'ton|<chain:ton-address>', or valid system-level username), or valid Ethereum address.",
                      "type": "string",
                    },
                  },
                  "required": [
                    "fire",
                    "identity",
                  ],
                  "type": "object",
                },
                "type": "array",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "starter": {
                "properties": {
                  "fire": {
                    "minLength": 1,
                    "type": "string",
                  },
                  "identity": {
                    "description": "Allowed value is a user alias ('client|<user-id>', or 'eth|<checksumed-eth-addr>', or 'ton|<chain:ton-address>', or valid system-level username), or valid Ethereum address.",
                    "type": "string",
                  },
                },
                "required": [
                  "identity",
                  "fire",
                ],
                "type": "object",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "metadata",
              "starter",
              "authorities",
              "moderators",
            ],
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "deprecated": true,
      "description": "Gets the contract version. Deprecated. Use GetContractVersion instead. Transaction is read only (evaluate). Allowed roles: EVALUATE.",
      "isWrite": false,
      "methodName": "GetChaincodeVersion",
      "responseSchema": {
        "properties": {
          "Data": {
            "type": "string",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Transaction is read only (evaluate). Allowed roles: EVALUATE.",
      "isWrite": false,
      "methodName": "GetContractAPI",
      "responseSchema": {
        "properties": {
          "Data": {
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Transaction is read only (evaluate). Allowed roles: EVALUATE.",
      "isWrite": false,
      "methodName": "GetContractVersion",
      "responseSchema": {
        "properties": {
          "Data": {
            "type": "string",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Transaction is read only (evaluate). Allowed roles: EVALUATE.",
      "dtoSchema": {
        "properties": {
          "objectId": {
            "minLength": 1,
            "type": "string",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "objectId",
        ],
        "type": "object",
      },
      "isWrite": false,
      "methodName": "GetObjectByKey",
      "responseSchema": {
        "properties": {
          "Data": {
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Transaction is read only (evaluate). Allowed roles: EVALUATE.",
      "dtoSchema": {
        "properties": {
          "objectId": {
            "minLength": 1,
            "type": "string",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "objectId",
        ],
        "type": "object",
      },
      "isWrite": false,
      "methodName": "GetObjectHistory",
      "responseSchema": {
        "properties": {
          "Data": {
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
  ],
}
`;
